
package Telas.Visualização;

import Telas.Cadastrar.*;
import Controles.Conexões.Conexao;
import Controles.DAOs.AdminDAO;
import Controles.DAOs.CandidatoDAO;
import Modelos.Candidato.Candidato;
import Telas.Principal.TelaPrincipal;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.filechooser.*;

public class JInternalVisualizarCandidatos extends javax.swing.JInternalFrame {

    private static String path="null";
    public static String numEleicao="";

    public JInternalVisualizarCandidatos() {
        initComponents();
        setSize(901, 600);
        atualizaCombo(TelaPrincipal.numEleicao);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbProcurar = new javax.swing.JComboBox<>();
        jtfNome = new javax.swing.JTextField();
        jbAtualizar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        lbFoto = new javax.swing.JLabel();
        jtfCod = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmImagem = new javax.swing.JMenu();
        jmiSelecionarFoto = new javax.swing.JMenuItem();

        setClosable(true);
        setTitle("Listar Candidatos");
        getContentPane().setLayout(null);

        jcbProcurar.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jcbProcurar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jcbProcurar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jcbProcurar.setRequestFocusEnabled(false);
        jcbProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbProcurarActionPerformed(evt);
            }
        });
        getContentPane().add(jcbProcurar);
        jcbProcurar.setBounds(670, 130, 180, 50);

        jtfNome.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jtfNome.setBorder(null);
        jtfNome.setOpaque(false);
        jtfNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfNomeKeyPressed(evt);
            }
        });
        getContentPane().add(jtfNome);
        jtfNome.setBounds(410, 318, 410, 40);

        jbAtualizar.setContentAreaFilled(false);
        jbAtualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbAtualizar.setFocusable(false);
        jbAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarActionPerformed(evt);
            }
        });
        jbAtualizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbAtualizarKeyPressed(evt);
            }
        });
        getContentPane().add(jbAtualizar);
        jbAtualizar.setBounds(80, 460, 200, 60);

        jbExcluir.setContentAreaFilled(false);
        jbExcluir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbExcluir.setFocusable(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });
        jbExcluir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbExcluirKeyPressed(evt);
            }
        });
        getContentPane().add(jbExcluir);
        jbExcluir.setBounds(360, 460, 180, 60);

        jbCancelar.setContentAreaFilled(false);
        jbCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbCancelar.setFocusable(false);
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        jbCancelar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbCancelarKeyPressed(evt);
            }
        });
        getContentPane().add(jbCancelar);
        jbCancelar.setBounds(610, 460, 200, 60);

        lbFoto.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        lbFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lbFoto);
        lbFoto.setBounds(80, 70, 270, 280);

        jtfCod.setFont(new java.awt.Font("Impact", 0, 60)); // NOI18N
        jtfCod.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jtfCod.setText("0");
        getContentPane().add(jtfCod);
        jtfCod.setBounds(410, 130, 120, 90);

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Visualizar/bgListarCandidato.png"))); // NOI18N
        getContentPane().add(bg);
        bg.setBounds(0, 0, 900, 550);

        jmImagem.setText("Arquivo");

        jmiSelecionarFoto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jmiSelecionarFoto.setText("Selecionar Foto");
        jmiSelecionarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSelecionarFotoActionPerformed(evt);
            }
        });
        jmImagem.add(jmiSelecionarFoto);

        jMenuBar1.add(jmImagem);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiSelecionarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSelecionarFotoActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Inserir imagem");
        
        //No JFileChooser Aparece apenas pastas
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //No JFileChooser Aparece apenas as extenções jpg e png
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Somente imagens", "jpg","png","jpeg");
        jfc.setFileFilter(filter);
        
        int retorno = jfc.showOpenDialog(this);
            if(retorno==JFileChooser.APPROVE_OPTION){
                File file = jfc.getSelectedFile();
                
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(file.getPath()).getImage().getScaledInstance(lbFoto.getWidth(), lbFoto.getHeight(), Image.SCALE_DEFAULT));
                lbFoto.setIcon(imageIcon);
                this.path=file.getPath();
            }
    }//GEN-LAST:event_jmiSelecionarFotoActionPerformed

    private void jbAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarActionPerformed
        atualizar();
    }//GEN-LAST:event_jbAtualizarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
       this.dispose();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jtfNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNomeKeyPressed
        if(evt.getKeyCode()== KeyEvent.VK_ESCAPE){
            this.dispose();
        }
        
        if(evt.getKeyCode()== KeyEvent.VK_DOWN){
            jbExcluir.requestFocus();
        }

    }//GEN-LAST:event_jtfNomeKeyPressed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        excluir();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbAtualizarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbAtualizarKeyPressed
        if(evt.getKeyCode()== KeyEvent.VK_ESCAPE){
            this.dispose();
        }
        
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            atualizar();
        }
        if(evt.getKeyCode()== KeyEvent.VK_UP){
            jtfNome.requestFocus();
        }
        if(evt.getKeyCode()== KeyEvent.VK_RIGHT){
            jbExcluir.requestFocus();
        }
    }//GEN-LAST:event_jbAtualizarKeyPressed

    private void jbExcluirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbExcluirKeyPressed
        if(evt.getKeyCode()== KeyEvent.VK_ESCAPE){
            this.dispose();
        }
        
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            excluir();
        }
        if(evt.getKeyCode()== KeyEvent.VK_UP){
            jtfNome.requestFocus();
        }
        if(evt.getKeyCode()== KeyEvent.VK_LEFT){
            jbAtualizar.requestFocus();
        }
        if(evt.getKeyCode()== KeyEvent.VK_RIGHT){
            jbCancelar.requestFocus();
        }
    }//GEN-LAST:event_jbExcluirKeyPressed

    private void jbCancelarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbCancelarKeyPressed
        if(evt.getKeyCode()== KeyEvent.VK_ESCAPE){
            this.dispose();
        }
        
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            this.dispose();
        }
        if(evt.getKeyCode()== KeyEvent.VK_UP){
            jtfNome.requestFocus();
        }
        if(evt.getKeyCode()== KeyEvent.VK_LEFT){
            jbExcluir.requestFocus();
        }
    }//GEN-LAST:event_jbCancelarKeyPressed

    private void jcbProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProcurarActionPerformed
        Connection con = Conexao.abrirConexao();
        CandidatoDAO sql = new CandidatoDAO(con);
        String nome = jcbProcurar.getSelectedItem().toString();
        procurarCandidato(nome);
        Conexao.fecharConexao(con);
    }//GEN-LAST:event_jcbProcurarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton jbAtualizar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JComboBox<String> jcbProcurar;
    private javax.swing.JMenu jmImagem;
    private javax.swing.JMenuItem jmiSelecionarFoto;
    private javax.swing.JLabel jtfCod;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JLabel lbFoto;
    // End of variables declaration//GEN-END:variables

    private void atualizar() {
        String s = verificarSenha();
        if(s.equalsIgnoreCase("yes")){
            if(jtfNome.getText().equals("") || lbFoto.getIcon().equals(null)){
                JOptionPane.showMessageDialog(null, "Lembre-se de colocar um nome e selecionar uma foto para poder atualizar.","JKLR Sistemas",JOptionPane.WARNING_MESSAGE);
                if(jtfNome.getText().length()>=46){
                        JOptionPane.showMessageDialog(null, "O número máximo de caracteres no nome e 45.","JKLR Sistemas",JOptionPane.WARNING_MESSAGE);
                }else{
                    //coletei os dos camppos de texto do formulário
                    int cod = Integer.parseInt(jtfCod.getText());
                    String nome = jtfNome.getText();
                    String caminho = this.path;

                    //Instanciei um objeto Candidato
                    Candidato a = new Candidato();

                    //Atribui os valores dos campos de texto ao objeto criado
                    a.setCod_candidato(cod);
                    a.setNome(nome);
                    a.setFoto(caminho);

                    Connection con = Conexao.abrirConexao();
                    CandidatoDAO adao = new CandidatoDAO(con);
                    String reg = adao.atualizarCandidato(a);
                        if(reg.equals("ok")){
                            JOptionPane.showMessageDialog(null, "Candidato atualizado com sucesso.","JKLR Sistemas",JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();
                        }else{
                            JOptionPane.showMessageDialog(null, "Falha ao atualizar o candidato.","JKLR Sistemas",JOptionPane.ERROR_MESSAGE);
                        }
                    Conexao.fecharConexao(con);    
                }
            }
        }    
    }

    private void InserirDados(int cod) {
        Connection con = Conexao.abrirConexao();
        CandidatoDAO sql = new CandidatoDAO(con);
        List<Candidato> lista = new ArrayList<>();
        lista = sql.buscarCandidato(cod);
        
            for(Candidato a : lista){
                jtfCod.setText("" + a.getCod_candidato());
                jtfNome.setText("" + a.getNome());
                String url = a.getFoto();
                this.path = url;
                colocarFoto(url);
            }
        Conexao.fecharConexao(con);
    }
    
    private void excluir() {
        String s = verificarSenha();
        if(s.equalsIgnoreCase("yes")){
            if(jtfNome.getText().equals("") || lbFoto.getIcon().equals(null) || jtfCod.getText().equalsIgnoreCase("0")){
                JOptionPane.showMessageDialog(null, "Lembre-se de não modificar o nome e/ou a foto para poder excluir.","JKLR Sistemas",JOptionPane.WARNING_MESSAGE);
            }else{
                //coletei os dos camppos de texto do formulário
                int cod = Integer.parseInt(jtfCod.getText());

                //Instanciei um objeto Candidato
                Candidato a = new Candidato();

                //Atribui os valores dos campos de texto ao objeto criado
                a.setCod_candidato(cod);

                Connection con = Conexao.abrirConexao();
                CandidatoDAO adao = new CandidatoDAO(con);
                String reg = adao.deletarCandidatos(a);
                Conexao.fecharConexao(con);
                    if(reg.equals("ok")){
                        JOptionPane.showMessageDialog(null, "Candidato excluido com sucesso.","JKLR Sistemas",JOptionPane.INFORMATION_MESSAGE);
                        voltarAoZero();
                        dispose();
                    }else{
                        JOptionPane.showMessageDialog(null, "Falha ao excluir o candidato.","JKLR Sistemas",JOptionPane.ERROR_MESSAGE);
                    }
            }
        }
           
    }

    private void limparCampos() {
        jtfCod.setText("0");
        jtfNome.setText("");
        lbFoto.setIcon(null);

    }

    private void colocarFoto(String url) {
        ImageIcon imageIcon = new ImageIcon(new ImageIcon(url).getImage().getScaledInstance(lbFoto.getWidth(), lbFoto.getHeight(), Image.SCALE_DEFAULT));
        lbFoto.setIcon(imageIcon);
    }
    
    public void voltarAoZero(){
        jtfCod.setText("0");
        jtfNome.setText("");
        lbFoto.setIcon(null);
    }
  
    private void procurarCandidato(String nome) {
        Connection con = Conexao.abrirConexao();
        CandidatoDAO sql = new CandidatoDAO(con);
        int cod = sql.ConsultarCodCandidato(nome);

            if(cod==0){
                JOptionPane.showMessageDialog(null, "Você não selecionou nenhum candidato.", "JKLR Sistemas", JOptionPane.WARNING_MESSAGE);
            }else{
                    if(sql.TestarCandidato(cod)==false){
                        JOptionPane.showMessageDialog(null, "Candidato não existe.", "JKLR Sistemas", JOptionPane.WARNING_MESSAGE);
                        limparCampos();
                        Conexao.fecharConexao(con);
                    }else{
                        limparCampos();
                        InserirDados(cod);
                        jtfNome.requestFocus();
                    }
                
            }
    }

    private void atualizaCombo(int resp) {
        Connection con = Conexao.abrirConexao();
        CandidatoDAO sql = new CandidatoDAO(con);
        List<Candidato> lista = new ArrayList<>();
        lista = sql.ListarComboCandidato(resp);
            for(Candidato b : lista){
                jcbProcurar.addItem(b.getNome());
            }
        Conexao.fecharConexao(con);
    }
    
    //--------------------------------------------------------------------------
    
    private String verificarSenha(){
        String dig = senha();
        String c="";
        String ret = verificarCod(dig);
        
        return ret;
    }
    
    private String verificarCod(String cod) {
        String retorno="";
        Connection con = Conexao.abrirConexao();
        AdminDAO sql = new AdminDAO(con);
            if(cod.equalsIgnoreCase("") || cod==null){
                
            }else{
                    if(sql.VerificarSenha(cod)==false){
                        retorno= "no";
                        JOptionPane.showMessageDialog(null, "Senha incorreta.", "JKLR Sistemas", JOptionPane.WARNING_MESSAGE);
                    }else{
                        retorno= "yes";
                    }
                
            }
        Conexao.fecharConexao(con);    
        return retorno;
    }
    
    private String senha(){
        JPasswordField senha = new JPasswordField(10);
        senha.setEchoChar('*');
        
        JLabel rotulo = new JLabel("Digite a senha:");
        
        JPanel entUsuario = new JPanel();
        entUsuario.add(rotulo);
        entUsuario.add(senha);
        
        JOptionPane.showMessageDialog(null, entUsuario, "JKLR Sistemas", JOptionPane.PLAIN_MESSAGE);
        senha.requestFocus();
        String s = senha.getText();
        
        return s;
    }
    //--------------------------------------------------------------------------

    
}
